[리액트 프로젝트 생성방법 및 시작]
1. 폴더를 만든다.(위치 상관 없음)
2. 폴더를 shift + 우클릭 해서 powershell 열기
3. npx create-react-app [프로젝트명]   입력해준다
   ※ 에러 발생하면 관리자 권한으로 powershell을 실행하고 다시 입력해본다. (그 이외 오류는 검색해보기) 
4. 생성된 폴더를 에디터로 열기
5. App.js 가 메인 페이지기 때문에 코드는 여기다가 작성
6. 터미널 열고 npm start 또는 localhost:3000 크롬 브라우저에 입력
   ※package.json 파일이 있는 폴더에서 실행해야 실행된다. (위치 중요)

[리엑트 설치 방법]
- html 파일에 직접 리엑트 설치해도 된다.(너무 힘듬)
- create react app 이라는 라이브러리 도움을 받으면 프로젝트 생성 쉬움 (일반적인 방법)
  이 라이브러리를 쓰고 싶으면 npm 이란 것이 필요.
  npm? node package manager - 패키지 관리해주는 녀석 
  nodejs 설치할 때, 자동으로 설치 됨

- npm이 설치가 되었으면 npx create-react-app [프로젝트명]  이라는 명령어 사용 가능
  위 명령어를 사용하면 react 프로젝트에 필요한 기본세팅을 해준다.

[node_modules 폴더]
- 프로젝트에 필요한 라이브러리 집합소

[public 폴더]
- static 파일 모아놓는 곳 : html 파일, 이미지 파일 등등 저장

[src 파일]
- 소스코드 보관

※ js 파일에서 html 짜도 실행이 된다? 이유는 App.js에 있던 html들을 index.html 파일에 넣는 방식이다.
index.js 파일이 그 역학을 해준다.

[package.json 파일]
- 프로젝트 정보들이 담겨져 있다.

--------------------------------------------------------------------------------------------------

[App.js 파일]
- js 파일에서 html 코드를 적는데 동작한다. 이유는 html 코드가 아니라 JSX 코드 이기 때문이다.
  JSX 란? js에서 사용할 수 있는 html 코드라 보면 된다.  
  왜 사용하냐면 원래 react에서 <div> 를 만들려면 React.createElement('div',null,'Hello World") 를 해야하기 때문이다.

[ JSX 문법 ]
- css 적용 방법
  보통 html 에서는 tag 에 class 속성을 부여해서 css를 적용하곤 한다.
  jsx에서는 className이라고 tag에 부여해주고 css는 똑같이 적용하면 된다.
  이유는 app.js에서 코드를 작성하고 있기 때문에 js에 Class 키워드랑 겹치기 때문이다.(작업하는 공간이 js 공간이기 때문이다)
  app.js 상단에 import "css 파일 경로" 적어주면 적용된다.
- 중괄호 활용 { }
  js로 변수를 넣어주려면 document.querySelector('h3').innerHTML = post; 이런식으로 해야한다.
  JSX 에서는 <div> {post} </div> 이런식으로 하면 된다. (속성에도 가능하다)
  이러한 상황을 '데이터바인딩' 이라고 부른다.
- style 적용 하는 방법
  html 에서는 <div style="color:red"></div>
  JSX 에서는 <div style={ {color : 'red', fontSize : '16px'} }></div>
  중괄호 안에 object 형태로 넣어줘야 한다.
  주의할 점은 font-size라고 적으면 안된다. 왜냐하면 마이너스 기호는 자바스크립트에서 뺄셈이라고 생각하기 때문이다.
  fontSize 이런식으로 뒤에 글자를 대문자로 적어준다.

[ 에러 확인 ]
- 터미널에 뜨거나 개발자도구(F12) 눌러서 확인

----------------------------------------------------------------

[ App.js 에서 return ]
- return() 괄호 안에는 하나의 태그만 리턴해줘야 한다. 병렬 태그 X

[ state ]
- react에서 변수를 저장할 때 사용할 수 있다.
- useState() 라고 코드 입력하면 import 하는 부분에 import { useState } from 'react'; 생길 것 이다.
- let [a,b ] = useState('남자 코트 추천'); 이런식으로 사용한다.
- a 자리에는 보관하려는 데이터가 저장된다. 
- b 는 state 변경도와주는 함수이다.

- 그렇다면 state는 왜 사용하는가?
  변수랑 state의 차이점
  - 변수를 사용한 html은 렌더링이 적용되지 않는다. (바꾸려면 할 수는 있을 것 이다.)
  - state를 사용한 html은 자동 재렌더링이 된다.

- state 생성 위치
  - 웬만하면 부모에 하는게 좋다. 이유는 부모에서도 사용하고 자식에서도 사용할 경우에는 부모에 해야하고,
    자식만 사용하면 자식에 선언해도 좋지만, 자식에서 사용하는 state는 부모로 전송이 안되므로 필요할 때 이런일이 발생할 수 있다.
    사실 상황따라 하면 된다.

-------------------------------------------------------------------------

[ Warning & Error 메세지 ]
 - Warning 메세지 무시 가능
 - 지우고 싶으면 /* eslint-disable*/ 맨 위에 적는다.
 - 경고메세지들을 Lint 라고 부른다.
 - Warning 메세지에 뜨는 내용을 수정해도 된다.

[ state 변경 하는 법 ]
 - state를 변경하려면 state 함수를 사용해서 변경해야한다.
   왜냐하면 state를 직접 변경하려고 하면 재렌더링이 동작하지 않기 때문이다.
   state 함수를 이용해서 state를 변경하면 재렌더링이 돼서 페이지에 변경된 값이 보인다.

-----------------------------------------------------------------------------

[ array / object 변경할 때 ]
 - 원본 데이터를 보존하는게 좋다. (값을 바꿀 때 원본이 바뀌는 생각해보자)
 - copy 본을 만들어서 저장해놓고 copy본을 수정해서 copy본을 state 함수로 변경해준다.
 - ex)  원본 ->   let [ name, setName ] = useState(['철수','영희']);
        
        원본을 바꿀 경우 ->  name[0]='종훈'
                            setName(name);
       - 일단 이렇게 하면 name은 state인데 직접 변경하려는 거여서 안됨

        copy를 이용한 경우 -> let copy = [...name];
                             copy[0]='종훈';
                             setName(copy); 
       - 원본은 바뀌지 않는다.

 [ onClick ]
  - onClick = { 함수 }  -> { } 안에는 함수가 들어가야한다.
   ex)  let [like, setLike] = useState(0); // 선언되어 있으면
        <span onClick={() => setLike((prev) => prev + 1)}> 👍</span>
        useState 함수의 콜백함수의 첫번째 매개변수는 현재의 state값이 전달된다.
        
        위와 같이 사용하는게 좋다. 이유는 승환, 상민이 형한테 정확히 물어보기
        동기식, 비동기식 차이라고 들었음.


  - 코드를 좀 더 깔금하게 하려면 onClick ={ 함수 }  함수 자리에 변수만 넣어주는 것이 깔금하다.
  const showModal = () => {
    // setModal(!modal);
    setModal((prev) => {
      return !prev;
    });
  };

  onClick = { showModal } 이런식으로!!
 

 - 만약 파라미터가 있는 함수라면?? 
  const countUpLike = (index) => {
    setLike((prev) => {
      let copy = [...like];
      copy[index] += 1;
      return copy;
    });
  };

onClick = { ()=> { countUpLike(index)} } 이런식으로!!

onClick = { countUpLike(index)} 이건 안된다. 왜냐하면 {} 안에는 함수정의가 들어가야하는데
이 코드는 함수 정의가 아니라 함수를 실행하는 것이기 때문이다.

-----------------------------------------------------------------------------------

[ Component ]
 - 만드는 법
   - function 만들기 ( 위치 중요 ) 함수 밖에 만들어야 한다.(app.js 밖에)
   - return () 안에 html 담기. return은 한 태그만 반환 할 수 있다.
   - <함수명></함수명> 넣고싶은곳에 써주면 된다. 또는 <함수명/> 이렇게 써도 된다.
 - html을 덩어리로 관리 가능 (보기도 편하다, 어떤 기능을 하는지 판별도 쉬움)
 - 컴포넌트 언제 만들면 좋은가?
  - 반복적인 html을 써야할 때
  - 큰 페이지를 구성할 때
  - 자주변경되는 것들
 - 컴포넌트를 사용하면 단점도 있다.
  - state 가져다쓸 때 문제가 생긴다. (함수 범위를 생각해보면 이해 됨)

  App.js 파일 보면 function App() 도 실은 컴포넌트다! index.js 가면 <App></App> 있을거다.

---------------------------------------------------------------------------------------------------

[ 동적인 UI 만드는 방법]
 - html, css 로 미리 디자인 완성해놓기 (컴포넌트를 만들어 놓는다.)
 - UI의 현재 상태를 state로 저장 ( UI 의 상태를 표현할 수 있기만 하면 된다. 0,1 또는 true, false 이런식으로)
 - state에 따라 UI가 어떻게 보일지 작성
   ( html 공간에 조건문을 쓰고 싶으면 삼항연산자를 이용해서 한다.)
   
          {
   ex)         1==1 ? '참' : '거짓' //이런식으로 작성한다. 중괄호는 써줘야 한다.
          }


--------------------------------------------------------------------

[ Map 함수 활용 ] 
 - 반복적인 html을 작성할 때 사용
 - ex) [1,2,3].Map((arr,index)=>{
   return (<div key={index}>안녕</div>)
 })
 - 반복적인 html을 생성할 때는 key값을 부여해줘서 구별 해줘야 한다. (꼭 숫자가 아니여도 됨)
   그래야 리액트가 <div>들을 각각 구분할 수 있어서 그렇다. 
 - key 속성은 리액트 문법이기 때문에 F12를 눌러서 확인해보면 key 속성이 보이지 않는다.
  왜냐하면 리액트 문법이기 때문에 렌더링 할 때, js 문법으로 바꾸기 때문에 key 속성은 보이지 않는 것이다.
 - key 값을 index로 주면 안된다. 이유는 찾아보자

없으면 워닝띄워줌  
 이렇게 하면 [ <div>안녕</div>, <div>안녕</div>, <div>안녕</div> ] 리턴한다
 근데 이걸 html로 미리보기 띄워볼 땐
<div>안녕</div>
<div>안녕</div>
<div>안녕</div>
이렇게 보이기 때문에 map()를 사용해서 반복 생성 가능!

 - for 반복문은 JSX 중괄호 안에서 사용할 수 없어서 map() 을 대신 사용한다.

 -일반적인 for 문을 사용하고 싶을 때
  function App (){
  
  var 어레이 = [];
  for (var i = 0; i < 3; i++) {
    어레이.push(<div>안녕</div>)
  }

  return (
    <div>
      { 어레이 }
    </div>
  )
}
 이렇게 쓸 수 있다. (자바스크립트 문법은 return 전에 써줘야 겠즤?)

-------------------------------------------------------------------------------

[ props ]
- 왜 사용하는가?
 - 컴포넌트를 정의할 때, 다른 컴포넌트에 있는 state값을 사용할 수 없다. (지역변수 개념)
 - 부모 컴포넌트에서 자식 컴포넌트에 state값을 보내줄 수 있다.
 - 반대로는 안된다! (부모에서 자식으로만 가능하다)

- 문법
 - 부모에서 자식으로 state 전송하는 방법
  - <자식컴포넌트 작명 = { state 이름 }>  ( state만 꼭 보내야 하는 것은 아니고 원하는거 보낸거 가능하다)
  - 자식컴포넌트 정의한 곳에 porps 파라미터 등록 후 props.작명 사용 
  
